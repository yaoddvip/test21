<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- 扫描service包下的注解 -->
	<context:component-scan base-package="com.by.service"></context:component-scan>
	
	<!-- 引入jdbc.properties 文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 
		整合数据源 
		c3p0  dbcp druid
	-->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean> -->
	
	<!-- 使用 DriverManagerDataSource 不是连接池 ，每次请求都会开启和关闭事务 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean> -->
	
	<!-- 使用c3p0 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean> -->
	
	<!-- 使用dbcp -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- maxActive：最大连接数 -->
		<property name="maxActive" value="20"></property>
		<!-- initialSize：初始化连接数 -->
		<property name="initialSize" value="5"></property>
		<!-- maxIdle:最大等待连接数 -->
		<property name="maxIdle" value="20"></property>
	</bean>
	
	<!-- 整合SqlSessionFactoryBean   -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- mapper.xml文件的路径 -->
		<property name="mapperLocations" value="classpath:com/by/mapper/*.xml"></property>
	</bean>
	
	<!-- 扫描mapper接口文件 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" ></property>
		<property name="basePackage" value="com.by.mapper"></property>
	</bean>
	
	<!-- 事务管理  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 6.使用声明式事务： 
		transaction-manager = "txManager" tx:advice 这种 是用 aop方式管理事物 
		annotation-driven 这种是注解方式管理事物 
			第一种方式，需要在spring配置文件配置一些参数
			第二种方式，需要在 类里 加一些注解进行事物管理 
			用一种就行，没必须都用
	-->
	<!-- 开启注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 
	<tx:advice id="txManager" transaction-manager="transactionManager">
		<tx:attributes>
				 属性： 
					name：对什么样的方法添加事务管理
					传播特性、隔离级别、回滚策略、访问超时、只读 
			<tx:method name="add*"/>
			<tx:method name="delete*" />
			<tx:method name="update*" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:advisor advice-ref="txManager" pointcut="execution(* com.by.service..*.*(..))"/>
	</aop:config> -->
	
</beans>
